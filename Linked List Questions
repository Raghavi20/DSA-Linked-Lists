Merge Two Sorted Lists:
https://leetcode.com/problems/merge-two-sorted-lists/

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummyPointer = currentPointer = ListNode(-1)
        
        while list1 and list2:
            if list1.val < list2.val:
                currentPointer.next = list1
                list1 = list1.next
            else:
                currentPointer.next = list2
                list2 = list2.next
            currentPointer = currentPointer.next
        if list1 == None:
            currentPointer.next = list2
        if list2 == None:
            currentPointer.next = list1
        return dummyPointer.next
            
        (OR)
        
class Solution:
    def mergeTwoLists(self, head1: Optional[ListNode], head2: Optional[ListNode]) -> Optional[ListNode]:

        if not head1 or not head2:
            return head1 or head2

        if head1.val <= head2.val:
            HEAD = head1
            s = head1
            f1 = head1.next
            f2 = head2
        else:
            HEAD = head2
            s = head2
            f1 = head2.next
            f2 = head1

        while f1 and f2:
            if f2.val < f1.val:
                s.next = f2
                s = f2
                f2 = f2.next
            else:
                s.next = f1
                s = f1
                f1 = f1.next

        if f2:
            s.next = f2
        if f1:
            s.next = f1

        
        return HEAD
        
 --------------------------------------------------------------------------------------------------------
 2. Delete Node in a Linked List
 https://leetcode.com/problems/delete-node-in-a-linked-list/
 
 class Solution:
    def deleteNode(self, node):
        """
        :type node: ListNode
        :rtype: void Do not return anything, modify node in-place instead.
        """
        node.val = node.next.val
        node.next = node.next.next
        return
        
 ----------------------------------------------------------------------------------------------------------
 3. Remove Linked List Elements:
 https://leetcode.com/problems/remove-linked-list-elements/
 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeElements(self, head, val):
        dummyNode = ListNode(-1)
        dummyNode.next = head
        curr = head
        prev = dummyNode
        while curr != None:
            if curr.val == val:
                prev.next = curr.next
            else:
                prev = curr
            curr = curr.next
        return dummyNode.next
----------------------------------------------------------------------------------------
4. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        tempNode = None
        curr = head
        while curr != None:
            tempNode = curr.next
            curr.next = prev
            prev = curr
            curr = tempNode
        return prev
        
----------------------------------------------------------------------------------------
5. Add Two Numbers:
https://leetcode.com/problems/add-two-numbers/



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummyNode = res = ListNode(-1)
        
        carry = 0
        
        while l1 != None and l2 != None:
            curr = l1.val+l2.val+carry
            carry = curr//10
            
            node = ListNode(curr%10)
            
            res.next = node
            
            l1 = l1.next
            l2 = l2.next
            res = res.next
            
        #if anything left
        while l1 != None:
            curr=l1.val+carry
            carry = curr//10
            node = ListNode(curr%10)
            
            res.next = node
            l1=l1.next
            res = res.next
            
        while l2 != None:
            curr=l2.val+carry
            carry = curr//10
            node = ListNode(curr%10)
            
            res.next = node
            l2=l2.next
            res = res.next
        
        #atlast if carry is not 0
        if carry==1:
            node = ListNode(carry)
            res.next = node
            
            
            
        return dummyNode.next
            
--------------------------------------------------------------------------------------------------    
6. Add Two Numbers 2
https://leetcode.com/problems/add-two-numbers-ii/



class Solution:
    def addTwoNumbers(self, l1,l2):
        return self.reverse(self.addTwoNumbersInReverse(self.reverse(l1),self.reverse(l2)))
        
        
    def reverse(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        tempNode = None
        curr = head
        while curr:
            tempNode = curr.next
            curr.next = prev
            prev = curr
            curr = tempNode
        return prev
    
    
    def addTwoNumbersInReverse(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummyPtr = res = ListNode(-1)
        
        carry = 0
        
        while l1 != None and l2 != None:
            curr = l1.val+l2.val+carry
            carry = curr//10
            
            node = ListNode(curr%10)
            
            res.next = node
            
            l1 = l1.next
            l2 = l2.next
            res = res.next
            
        #if anything left
        while l1 != None:
            curr=l1.val+carry
            carry = curr//10
            node = ListNode(curr%10)
            
            res.next = node
            l1=l1.next
            res = res.next
            
        while l2 != None:
            curr=l2.val+carry
            carry = curr//10
            node = ListNode(curr%10)
            
            res.next = node
            l2=l2.next
            res = res.next
        
        #atlast if carry is not 0
        if carry==1:
            node = ListNode(carry)
            res.next = node
            
            
            
        return dummyPtr.next
            

----------------------------------------------------------------------------------------------------
7. Middle Of The Linked List
https://leetcode.com/problems/middle-of-the-linked-list/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head == None:
            return None
        slow = head
        fast = head
        
        while fast.next != None and fast.next.next != None:
            slow = slow.next
            fast = fast.next.next
        if fast.next != None:
            return slow.next
        
            
        return slow
        
        or
        
        
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        return slow
 -----------------------------------------------------------------------------------------------------------
 8. Palindrome Linked List
 https://leetcode.com/problems/palindrome-linked-list/
 
 class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        if head == None or head.next == None:
            return True
        
        midNode = self.middleNode(head)
        rightHalf = self.reverseList(midNode)
        midNode.next = None
        leftHalf = head
        return self.compare(leftHalf,rightHalf)
    
    def compare(self,leftHalf,rightHalf):
        l1 = leftHalf
        l2 = rightHalf
        while l1 != None and l2 != None:
            if l1.val != l2.val:
                return False
            l1 = l1.next
            l2 = l2.next
        return True
        
        
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head == None:
            return None
        slow = head
        fast = head
        
        while fast.next != None and fast.next.next != None:
            slow = slow.next
            fast = fast.next.next
            
        return slow
        
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        tempNode = None
        curr = head
        while curr:
            tempNode = curr.next
            curr.next = prev
            prev = curr
            curr = tempNode
        return prev
        
       (or)
       
       
 class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        
        #TC - O(N/2)+O(N/2)+O(N/2)
        #SC - O(1)
        mid = self.getMid(head)
        
        reversedHalf = self.reverseHalf(mid)
        
        while head and reversedHalf:
            if head.val != reversedHalf.val:
                return False
            
            head = head.next
            reversedHalf = reversedHalf.next
            
        return True
    
    
    def getMid(self,head):
        
        slow = head
        fast = head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        return slow
    
    def reverseHalf(self,head):
        prev = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = prev
            prev = cur
            cur = temp
            
        return prev
--------------------------------------------------------------------------------------------------

        
        
        
        
       
