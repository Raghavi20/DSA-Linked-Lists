Operations In a Linked List:

From Code basics youtube channel
Link : https://www.youtube.com/watch?v=qp8u-frRAnU


class Node:
    def __init__(self, data=None, next=None):
        self.data = data        #can contain int,str etc
        self.next = next        #pointer

class LinkedList:
    def __init__(self):
        self.head = None          #points to head of LL
    
    def insert_at_beginning(self,data):       #takes data,value and inserts at start
      node = Node(data,self.head)
      self.head = Node
   
 ----------------------------------------------------------------------------------------------------------
    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return

        itr = self.head
        str = ''
        while itr.next:
            str += str(itr.data) + ' --> '
            itr = itr.next
        print(str)
 -------------------------------------------------------------------------------------------------------------      
    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None)      #here none ie; next. Here as we are inserting element at end,next of that element is null & now we are pointing to head.
            return

        itr = self.head

        while itr.next:         #until itr goes till end nd becomes NULL
            itr = itr.next        #keep on iterating till NULL

        itr.next = Node(data, None)
  -----------------------------------------------------------------------------------------------------------  
    
    def insert_values(self, data_list):       #take a list of values as ip & create new LL
        self.head = None
        for data in data_list:
            self.insert_at_end(data)
            
 ---------------------------------------------------------------------------------------------------------------           
    def get_length(self):
        count = 0
        itr = self.head
        while itr:            #iterating through LL and counting it
            count+=1
            itr = itr.next

        return count
--------------------------------------------------------------------------------------------------------------        

    def insert_at(self, index, data):                         #To insert value at a particular index/position
        if index<0 or index>self.get_length():
            raise Exception("Invalid Index")

        if index==0:
            self.insert_at_begining(data)
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                node = Node(data, itr.next)
                itr.next = node
                break

            itr = itr.next
            count += 1
----------------------------------------------------------------------------------------------------------------
    def remove_at(self, index):                     # remove an element at a given index
        if index<0 or index>=self.get_length():
            raise Exception("Invalid Index")

        if index==0:        # to remove head
            self.head = self.head.next        #pointing to next element
            return

        count = 0                             #Here we are removing index & in LL we are manually maintaining the count to reac that particular index
        itr = self.head
        while itr:
            if count == index - 1:            #If we remove the link of next element,that element is deleted
                itr.next = itr.next.next
                break

            itr = itr.next
            count+=1

    
-----------------------------------------------------------------------------------------------------------------

    def insert_after_value(self, data_after, data_to_insert):
        if self.head is None:
            return

        if self.head.data==data_after:
            self.head.next = Node(data_to_insert,self.head.next)
            return

        itr = self.head
        while itr:
            if itr.data == data_after:
                itr.next = Node(data_to_insert, itr.next)
                break

            itr = itr.next
-----------------------------------------------------------------------------------------------------------------
    def remove_by_value(self, data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.next
            return

        itr = self.head
        while itr.next:
            if itr.next.data == data:
                itr.next = itr.next.next
                break
            itr = itr.next

if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_values(["banana","mango","grapes","orange"])
    ll.print()
    ll.insert_after_value("mango","apple")
    ll.print()
    ll.remove_by_value("orange")
    ll.print()
    ll.remove_by_value("figs")
    ll.print()
    ll.remove_by_value("banana")
    ll.remove_by_value("mango")
    ll.remove_by_value("apple")
    ll.remove_by_value("grapes")
    ll.print()

    # ll.insert_values([45,7,12,567,99])
    # ll.insert_at_end(67)
    # ll.print()
  
